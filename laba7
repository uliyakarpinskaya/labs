#include "stdafx.h"
#include "conio.h"
#include "stdlib.h“
node * addnode(int x, node *root) {
  if (root == NULL) { // Если дерева нет, то формируем корень
    root =new node; // память под узел
	root->key = x;   // поле данных
    root->left =  NULL;
    root->right = NULL; // ветви инициализируем пустотой
  }else  if (x < root->key)   // условие добавление левого потомка
    root->left = addnode(x,root->left);
  else    // условие добавление правого потомка
    root->right = addnode(x,root->right);
  return(root);
}void preorder(node *root)
{
	if (root!=NULL) { //Пока не встретится пустой узел
		printf("%d", root->key); //Отображаем корень дерева
		preorder(root->left); //Рекурсивная функция для левого поддерева
		preorder(root->right); //Рекурсивная функция для правого поддерева
  }
}void postorder(node *root)

{
	if (root!=NULL) { //Пока не встретится пустой узел
    postorder(root->left); //Рекурсивная функция для левого поддерева
    postorder(root->right); //Рекурсивная функция для правого поддерева
    printf("%d", root->key); //Отображаем корень дерева
  }
void inorder(node *root)
{
	if (root!=NULL) { //Пока не встретится пустой узел
    inorder(root->left); //Рекурсивная функция для левого поддерева
    printf("%d", root->key); //Отображаем корень дерева
    inorder(root->right); //Рекурсивная функция для правого поддерева
  }
}
node* find_tree(node *root, int val)
{
	if (NULL==root)
		return NULL;
	if(val==root->key)
		return root;
	if(val< root->key)
		return find_tree(root->left, val);
	if(val> root->key)
		return find_tree(root->right, val);
}
int rightmost(node *root)
{
	while (root->right!=NULL)
		root=root->right;
	return root->key;
}
node* del_tree(node *root, int val)
{
	if(NULL==root) return NULL;
	if(root->key== val){
		if(NULL==root->left && NULL==root->right){
			free(root);
			return NULL;
		}
		if (NULL== root->right && root->left != NULL){
			node *temp= root->left;
			free(root);
			return temp;
		}
    if (NULL == root->left && root->right!=NULL) {
			node *temp= root->right;
			free(root);
			return temp;
		}
		root->key= rightmost(root->left);
	    root->left=del_tree(root->left, root->key);
		return root;
	}
	if (val< root->key){
		root->left=del_tree(root->left,val);
		return root;
	}
	if( val > root->key){
		root->right= del_tree(root->right, val);
	return root;
}
return root;
}
void del_all(node* root)
{
    if (!root) return;
    del_all(root->left);
    del_all(root->right);
    free (root);
    root = NULL;
}
void Nnodes(node* root, int &p)
{
    if (root == NULL) return;
    p++;
    Nnodes(root->left, p);
    Nnodes(root->right, p);
}
void Height(node* root, int p, int& h)
{
    if ( root == NULL) return;
    p++;
    if( root->left == NULL && root->right == NULL) // Проверка на достижение терминального узла
       if (p > h)
          h = p;
    Height(root->left, p, h);
    Height(root->right, p, h);
}
